
//************************************************************************************************************
//************************************************************************************************************

	#include <iostream>
	#include <cmath>
	#include <fstream>

	using namespace std;

//************************************************************************************************************
//************************************************************************************************************

int main(){

	ofstream outfile1("outputA.txt");
	//ofstream outfile2("outputB.txt");

	float T1, dE, p_min, p_max, p_star, p1, p2, p11, p12, p13, p14;
	float dE1[10] = {0.1,1,24.5,34.5,44.5,54.5,64.5,74.5,84.5,95}; //DG
	float T[10] = {0.5,3.5,7.5,10.5,13.5,16.5,19.5,22.5,25.5,28.5};

	p_min = 0.0;
	p_max = 1.0;

//************************************************************************************************************
//************************************************************************************************************

	for (T1 = 0.0; T1 <= 100.0; T1 = T1 + 0.005){
		
		p_star = 1.0;
		p11 = p_star + ((p_min - p_star) * (exp(- dE1[0] / T1)));
		p12 = p_star + ((p_max - p_star) * (exp(- dE1[0] / T1)));
		
		p_star = 0.0;
		p13 = p_star + ((p_min - p_star) * (exp(- dE1[1] / T1)));
		p14 = p_star + ((p_max - p_star) * (exp(- dE1[1] / T1)));
		
		outfile1 << T1 << '\t' << p11 << '\t' << p12 << '\t' << p13 << '\t' << p14 << endl;
	}

//************************************************************************************************************
//************************************************************************************************************
/*
	for(T1 = 0; T1 <= 10000; T1 = T1 + 2){
		for(dE = 0; dE <= 100; dE = dE + 1){

			if (dE == 0){
				p_star = 1.0;
				p1 = p_star + ((p_min - p_star) * (exp(- dE / T1)));
				p2 = p_star + ((p_max - p_star) * (exp(- dE / T1)));
			}

			else{
				p_star = 0.0;
				p1 = p_star + ((p_min - p_star) * (exp(- dE / T1)));
				p2 = p_star + ((p_max - p_star) * (exp(- dE / T1)));
			}
			
			outfile2 << T1 << '\t' << dE << '\t' << p1 << '\t' << p2 << endl;
		}
	}
*/
//************************************************************************************************************
//************************************************************************************************************
/*
	for(int i = 0; i < 10; i++){
		for(int j = 0; j < 10; j++){

			if (j == 0){
				p_star = 1.0;
				p1 = p_star + ((p_min - p_star) * (exp(- dE1[j] / T[i])));
				p2 = p_star + ((p_min - p_star) * (exp(- dE2[j] / T[i])));
			}

			else{
				p_star = 0.0;
				p1 = p_star + ((p_max - p_star) * (exp(- dE1[j] / T[i])));
				p2 = p_star + ((p_max - p_star) * (exp(- dE2[j] / T[i])));
			}
			
			outfile2 << T[i] << '\t' << dE1[j] << '\t' << p1 << '\t' << p2 << endl;
		}
	}
*/
//************************************************************************************************************
//************************************************************************************************************

	outfile1.close();
	//outfile2.close();

return 0;
}

//************************************************************************************************************
//************************************************************************************************************
